# -*- coding: utf-8 -*-
"""Untitled3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1b3vg_WSMm__k6C8mYlBG4dtN_V2Orfdp
"""

# Commented out IPython magic to ensure Python compatibility.
#Linear Regressing Example
import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
import seaborn as sns
# %matplotlib inline
#import the necessary libraries

# importing the dataset
companies = pd.read_csv('/content/1000_Companies.csv')

X = companies.iloc[:,:-1].values
y = companies.iloc[:,4].values
#extracting independent and dependant variables

companies.head()
#displaying first 5 rows in the dataset

sns.heatmap(companies.corr())

from sklearn.preprocessing import LabelEncoder, OneHotEncoder
# taking object from LaberlEncoder()
labelEncoder = LabelEncoder()
# since we working in linear regression model so the state category(new york - florida) needs to change to numerical value
X[:,3] = labelEncoder.fit_transform(X[:,3])

#onehotencoder = OneHotEncoder(categorical_features = [3])
#X = onehotencoder.fit_transform(X).toarray()

from sklearn.compose import ColumnTransformer
# The last arg ([0]) is the list of columns you want to transform in this step
ct = ColumnTransformer([("State", OneHotEncoder(),[0])], remainder="passthrough")
ct.fit_transform(X)  


print(X[0])

# removing one extra column we put in there
X= X[:, 1:]

from sklearn.model_selection import train_test_split
#spliting the dataset into the training set and test set
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size= 0.2, random_state = 0)

from sklearn.linear_model import LinearRegression
#fitting multiple linear regression to the training set
model = LinearRegression()
#here in fit will do all linear regression manipulation such as correlation coeficient, local max min , cost
model.fit(X_train, y_train)

#predict the result which is the profit 
y_hat = model.predict(X_test)

y_hat

#coefficient of the model
model.coef_

#calculating the intercept
model.intercept_

#evaluating the model
from sklearn.metrics import r2_score
r2_score(y_test, y_hat)

#graphing the prediction
plt.plot(companies['R&D Spend'], companies['Profit'], 'o')
plt.plot(X_test, y_hat, color = 'r')
plt.xlabel('R&D Spend')
plt.ylabel('Profit')